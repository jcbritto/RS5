#!/usr/bin/env python3
"""
PASSO 6: Executar Simula√ß√£o Verilator
Executa o Verilator para simular o RS5 processando a imagem
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def verificar_arquivos_sim():
    """Verifica se arquivos da simula√ß√£o est√£o prontos"""
    sim_dir = Path("../sim")
    arquivos = ["program.hex", "test_image_data.hex"]
    
    faltando = []
    for arquivo in arquivos:
        caminho = sim_dir / arquivo
        if not caminho.exists():
            faltando.append(str(caminho))
    
    if faltando:
        print("‚ùå Arquivos de simula√ß√£o n√£o encontrados:")
        for arquivo in faltando:
            print(f"   - {arquivo}")
        print()
        print("Execute primeiro: python3 5_preparar_simulacao.py")
        sys.exit(1)
    
    return sim_dir

def executar_verilator(sim_dir):
    """Executa a simula√ß√£o com Verilator"""
    
    print("üöÄ Executando simula√ß√£o Verilator...")
    print("=" * 50)
    
    try:
        # Executar make run
        cmd = ["make", "run"]
        
        print(f"üìç Diret√≥rio: {sim_dir}")
        print(f"üíª Comando: {' '.join(cmd)}")
        print()
        print("üîç SA√çDA DO VERILATOR:")
        print("-" * 50)
        
        # Executar sem capturar sa√≠da para mostrar em tempo real
        result = subprocess.run(cmd, cwd=sim_dir)
        
        print("-" * 50)
        
        if result.returncode == 0:
            print("‚úÖ Simula√ß√£o conclu√≠da com sucesso!")
            return True
        else:
            print(f"‚ö†Ô∏è  Simula√ß√£o terminou com c√≥digo: {result.returncode}")
            print("   (Isso pode ser normal - timeout do testbench)")
            return True
            
    except Exception as e:
        print(f"‚ùå Erro na simula√ß√£o: {e}")
        return False

def analisar_log():
    """Analisa o log da simula√ß√£o para explicar o que aconteceu"""
    
    print()
    print("üîç AN√ÅLISE DO QUE ACONTECEU NA SIMULA√á√ÉO:")
    print("=" * 50)
    
    print("üìã ETAPAS EXECUTADAS:")
    print("   1. üîÑ Verilator compilou o design do RS5 + plugin")
    print("   2. üîß Carregou program.hex na mem√≥ria (c√≥digo RISC-V)")
    print("   3. üìä Carregou test_image_data.hex na mem√≥ria (dados da imagem)")
    print("   4. ‚ñ∂Ô∏è  Iniciou simula√ß√£o do processador RS5")
    print("   5. üñºÔ∏è  Programa C executou no RS5:")
    print("      - Leu cada pixel RGB da mem√≥ria")
    print("      - Enviou para plugin hardware (0x10000000)")
    print("      - Plugin converteu RGB ‚Üí Grayscale usando (R+G+B)/4")
    print("      - Resultado salvo na mem√≥ria de sa√≠da")
    print("   6. ‚è∞ Simula√ß√£o terminou por timeout ou conclus√£o")
    
    print()
    print("üî¨ SINAIS IMPORTANTES NO LOG:")
    print("   - 'Plugin Write/Read' ‚Üí Plugin hardware funcionando")
    print("   - 'Operation: addr=0x10000000' ‚Üí Acesso ao plugin")
    print("   - 'Loading image data' ‚Üí Dados carregados na RAM")
    print("   - 'IMAGE_PROCESSING_COMPLETE' ‚Üí Processamento conclu√≠do")

def main():
    print("üöÄ PASSO 6: EXECU√á√ÉO DO VERILATOR")
    print("=" * 50)
    
    # Verificar arquivos
    sim_dir = verificar_arquivos_sim()
    
    print("üìÅ Arquivos de simula√ß√£o verificados:")
    for arquivo in ["program.hex", "test_image_data.hex"]:
        caminho = sim_dir / arquivo
        tamanho = caminho.stat().st_size
        print(f"   ‚úÖ {arquivo} ({tamanho} bytes)")
    
    print()
    
    # Perguntar se usu√°rio quer continuar
    resposta = input("üéØ Executar simula√ß√£o agora? (s/N): ").lower()
    if resposta not in ['s', 'sim', 'y', 'yes']:
        print("‚è∏Ô∏è  Simula√ß√£o cancelada pelo usu√°rio")
        sys.exit(0)
    
    print()
    
    # Executar simula√ß√£o
    inicio = time.time()
    
    if executar_verilator(sim_dir):
        fim = time.time()
        duracao = fim - inicio
        
        analisar_log()
        
        print()
        print(f"‚è±Ô∏è  Tempo de simula√ß√£o: {duracao:.1f} segundos")
        print()
        print("‚úÖ SIMULA√á√ÉO COMPLETA!")
        print()
        print("üéØ PR√ìXIMO PASSO:")
        print("   Execute: python3 7_reconstruir_imagem.py")
        
    else:
        print()
        print("‚ùå FALHA NA SIMULA√á√ÉO!")
        print("   Verifique se Verilator est√° instalado")
        print("   Verifique se n√£o h√° erros no design RTL")
        sys.exit(1)

if __name__ == "__main__":
    main()